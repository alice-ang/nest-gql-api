# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Achievement {
  achieved: Float
  name: String!
  percent: Float
}

input CreateTodoInput {
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Game {
  appid: Int!
  img_icon_url: String
  name: String
  playtime_2weeks: Float
  playtime_deck_forever: Float
  playtime_disconnected: Float
  playtime_forever: Int!
  playtime_linux_forever: Float
  playtime_mac_forever: Float
  playtime_windows_forever: Float
  rtime_last_played: Float!
}

input GameInput {
  appId: String!
}

type GameNews {
  appid: Int!
  count: Int!
  newsitems: [NewsItem!]!
}

type GlobalAchievements {
  achievements: [Achievement!]!
}

type LogOutResponse {
  isLoggedOut: Boolean!
}

type Mutation {
  createTodo(createTodoInput: CreateTodoInput!): Todo!
  removeTodo(id: Int!): Todo!
  signIn(signInInput: SignInInput!): SignInResponse!
  signOut(id: Int!): LogOutResponse!
  signUp(signUpInput: SignUpInput!): SignInResponse!
  updateTodo(updateTodoInput: UpdateTodoInput!): Todo!
}

type NewsItem {
  appid: Int!
  author: String!
  contents: String!
  date: DateTime!
  feed_type: Int!
  feedlabel: String!
  feedname: String!
  gid: String!
  is_external_ur: Boolean!
  title: String!
  url: String!
}

type OwnedGames {
  game_count: Int!
  games: [Game!]!
}

input PlayerSpecificInput {
  appId: String
  steamId: String!
}

type PlayerStats {
  achievements: [Achievement!]!
  gameName: String!
  stats: [Stats!]!

  """Steam Id of player account"""
  steamID: String!
}

type PlayerSummary {
  avatar: String!
  avatarfull: String!
  avatarhash: String!
  avatarmedium: String!
  commentpermission: Int!
  communityvisibilitystate: Int!
  lastlogoff: Float!
  personaname: String!
  personastate: Int!
  personastateflags: Int!
  primaryclanid: String!
  profilestate: Int!
  profileurl: String!

  """Steam Id of player account"""
  steamId: String!
  timecreated: Int!
}

type Query {
  getGameNews(gameInput: GameInput!): GameNews!
  getGlobalGameAchievements(gameInput: GameInput!): GlobalAchievements!
  getOwnedGames(playerSpecificInput: PlayerSpecificInput!): OwnedGames!
  getPlayerAchievements(playerSpecificInput: PlayerSpecificInput!): [Steam!]!
  getPlayerStats(playerSpecificInput: PlayerSpecificInput!): PlayerStats!
  getPlayerSummary(playerSpecificInput: PlayerSpecificInput!): PlayerSummary!
  getRecentlyPlayed(playerSpecificInput: PlayerSpecificInput!): RecentlyPlayed!
  hello: String!
  todo(id: Int!): Todo!
  todos: [Todo!]!
}

type RecentlyPlayed {
  games: [Game!]!
  total_count: Int!
}

input SignInInput {
  email: String!
  password: String!
}

type SignInResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

type Stats {
  name: String!
  value: Int!
}

type Steam {
  avatar: String!
  avatarfull: String!
  avatarhash: String!
  avatarmedium: String!
  commentpermission: Int!
  communityvisibilitystate: Int!
  lastlogoff: Int!
  personaname: String!
  personastate: Int!
  personastateflags: Int!
  primaryclanid: String!
  profilestate: Int!
  profileurl: String!

  """Steam Id of player account"""
  steamId: String!
  timecreated: Int!
}

type Todo {
  createdAt: DateTime!
  id: Int!
  isCompleted: Boolean!
  title: String!
  updatedAt: DateTime!
}

input UpdateTodoInput {
  id: Int!
  isCompleted: Boolean!
  title: String
}

type User {
  email: String!
  id: Int!
  username: String!
}